//code referenced Prof. Karu's lecture material
//on 01/28, material is on course website
module statelogic (next_state, Out, state, InA);

input InA;
input [3:0] state;
output [3:0] next_state;
output Out;

reg [3:0] next_state;

assign Out = state[3];


always @(InA or state)
begin
  casex({InA,state})

    //state0
    //input 0, goto state0
    //input 1, goto state1
    5'b0_0000:
      next_state <= 4'b0000;
    5'b1_0000:
      next_state <= 4'b0001;

    //state1
    //
    5'b0_0000:
      next_state <= 4'b0000;
    5'b1_0001:
      next_state <= 4'b0001;

/*

    4'b0_001:
      next_state <= 3'b000;
    4'b1_001:
      next_state <= 3'b010;

    4'b0_010:
      next_state <= 3'b011;
    4'b1_010:
      next_state <= 3'b010;

    4'b0_011:
      next_state <= 3'b000;
    4'b1_011:
      next_state <= 3'b100;
    
    4'b0_100:
      next_state <= 3'b000;
    4'b1_100:
      next_state <= 3'b010;
*/
    
    default:
      next_state <= {4{1'bx}};
  endcase
end

endmodule
